{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","uiConfig","firestore","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","PhoneAuthProvider","firebaseui","AnonymousAuthProvider","callbacks","signInSuccessWithAuthResult","SignInScreen","useState","isSignedIn","setIsSignedIn","useEffect","unregisterAuthObserver","onAuthStateChanged","user","currentUser","displayName","className","onClick","signOut","firebaseAuth","App","useAuthState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAaAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,yBACZC,UAAW,SACXC,cAAe,qBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAGhBC,GAFYV,IAASW,YAEV,CAEfC,WAAY,QAEZC,cAAe,CACbb,IAASS,KAAKK,mBAAmBC,YACjCf,IAASS,KAAKO,qBAAqBD,YACnCf,IAASS,KAAKQ,kBAAkBF,YAChCG,OAAgBC,sBAAsBJ,aAExCK,UAAW,CAETC,4BAA6B,kBAAM,MAmBvC,SAASC,IACP,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OAPAC,qBAAU,WACR,IAAMC,EAAyB3B,IAASS,OAAOmB,oBAAmB,SAAAC,GAChEJ,IAAgBI,MAElB,OAAO,kBAAMF,OACZ,IAEEH,EAUH,gCACE,wCACA,yCAAYxB,IAASS,OAAOqB,YAAYC,YAAxC,+BACA,wBAAQC,UAAU,WAAWC,QAAS,kBAAMjC,IAASS,OAAOyB,WAA5D,yBAXA,gCACE,wCACA,gDACA,cAAC,IAAD,CAAoBxB,SAAUA,EAAUyB,aAAcnC,IAASS,YAaxD2B,MA3Cf,WAGE,MAAeC,YAAa5B,GAE5B,OAFA,oBAGE,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACV,EAAD,SCvCOgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3aafcbc5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/compat/app';\nimport * as firebaseui from 'firebaseui'\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport StyledFirebaseAuth from 'react-firebaseui/dist/StyledFirebaseAuth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDny8PAsKPiFPsdp8ml7M4xlu-XLwsNjgM\",\n  authDomain: \"cs1980.firebaseapp.com\",\n  projectId: \"cs1980\",\n  storageBucket: \"cs1980.appspot.com\",\n  messagingSenderId: \"725657314446\",\n  appId: \"1:725657314446:web:46e71dc4e4ddcccc0515df\",\n  measurementId: \"G-L36F0RL44J\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n    firebaseui.auth.AnonymousAuthProvider.PROVIDER_ID,\n  ],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false,\n  },\n};\n\n\nfunction App() {\n\n  \n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SignInScreen />\n      </header>\n    </div>\n  );\n}\n\nfunction SignInScreen() {\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  useEffect(() => {\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => {\n      setIsSignedIn(!!user);\n    });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  if (!isSignedIn) {\n    return (\n      <div>\n        <h1>My App</h1>\n        <p>Please sign-in:</p>\n        <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h1>My App</h1>\n      <p>Welcome {firebase.auth().currentUser.displayName}! You are now signed-in! </p>\n      <button className=\"sign-out\" onClick={() => firebase.auth().signOut()}>Sign-out</button>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}